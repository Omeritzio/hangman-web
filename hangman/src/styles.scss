

@use '@angular/material' as mat;

@include mat.core();

$hangman-primary: mat.define-palette(mat.$indigo-palette);
$hangman-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

$hangman-warn: mat.define-palette(mat.$red-palette);

$hangman-theme: mat.define-light-theme((
  color: (
    primary: $hangman-primary,
    accent: $hangman-accent,
    warn: $hangman-warn,
  )
));


@include mat.all-component-themes($hangman-theme);

$d: 70;      // density
$w: 600;     // grid size
$s: 3s;       // speed

// Generate the snow image using radial gradients
$grad: ();
@for $i from 0 to $d {
  $v: random(4) + 2;
  $a: random(5) * .1 + .5;
  $grad: $grad, radial-gradient(
      $v+px $v+px at
      (random($w - $v * 2) + $v)+px
      (random($w - $v * 2) + $v)+px, 
      rgba(255,255,255,$a) 50%,
      rgba(0,0,0,0)
  ) !global;
}

// The CSS
html {
  height: 100%;
  background: linear-gradient(#123 30%, #667);
  overflow: hidden;
}
.snow, .snow:before, .snow:after {
  position: fixed;
  top: -$w + px;
  left: 0;
  bottom: 0;
  right: 0;
  background-image: $grad;
  background-size: $w + px $w + px;
  animation: snow $s linear infinite;
  content: "";
}
.snow:after {
  margin-left: -$w/3 + px;
  opacity: .4;
  animation-duration: $s*2;
  animation-direction: reverse;
  filter: blur(3px);
}
.snow:before {
  animation-duration: $s*3;
  animation-direction: reverse;
  margin-left: -$w/2 + px;
  opacity: .65;
  filter: blur(1.5px);
}
@keyframes snow {
  to {
    transform: translateY($w + px);
  }
}

* {
    outline: none;
}



html, body { margin:0;
             padding: 0; 
            font-family: sans-serif,Georgia, 'Times New Roman', Times, serif;}
